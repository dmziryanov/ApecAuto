#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RmsAuto.TechDoc.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ex_rmsauto_store")]
	public partial class TecdocStoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertInvisibleManufacturer(InvisibleManufacturer instance);
    partial void UpdateInvisibleManufacturer(InvisibleManufacturer instance);
    partial void DeleteInvisibleManufacturer(InvisibleManufacturer instance);
    partial void InsertCountryVisibility(CountryVisibility instance);
    partial void UpdateCountryVisibility(CountryVisibility instance);
    partial void DeleteCountryVisibility(CountryVisibility instance);
    partial void InsertNameCorrection(NameCorrection instance);
    partial void UpdateNameCorrection(NameCorrection instance);
    partial void DeleteNameCorrection(NameCorrection instance);
    partial void InsertInvisibleModel(InvisibleModel instance);
    partial void UpdateInvisibleModel(InvisibleModel instance);
    partial void DeleteInvisibleModel(InvisibleModel instance);
    partial void InsertInvisibleModification(InvisibleModification instance);
    partial void UpdateInvisibleModification(InvisibleModification instance);
    partial void DeleteInvisibleModification(InvisibleModification instance);
    #endregion
		
		public TecdocStoreDataContext() : 
				base(global::RmsAuto.TechDoc.Properties.Settings.Default.ex_rmsauto_storeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TecdocStoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TecdocStoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TecdocStoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TecdocStoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<InvisibleManufacturer> InvisibleManufacturers
		{
			get
			{
				return this.GetTable<InvisibleManufacturer>();
			}
		}
		
		public System.Data.Linq.Table<CountryVisibility> CountryVisibilities
		{
			get
			{
				return this.GetTable<CountryVisibility>();
			}
		}
		
		public System.Data.Linq.Table<NameCorrection> NameCorrections
		{
			get
			{
				return this.GetTable<NameCorrection>();
			}
		}
		
		public System.Data.Linq.Table<InvisibleModel> InvisibleModels
		{
			get
			{
				return this.GetTable<InvisibleModel>();
			}
		}
		
		public System.Data.Linq.Table<InvisibleModification> InvisibleModifications
		{
			get
			{
				return this.GetTable<InvisibleModification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tecdoc.ManufacturerVisibility")]
	public partial class InvisibleManufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManufacturerID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    #endregion
		
		public InvisibleManufacturer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tecdoc.CountryVisibility")]
	public partial class CountryVisibility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    #endregion
		
		public CountryVisibility()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tecdoc.NameCorrections")]
	public partial class NameCorrection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NameCorrectionID;
		
		private string _OriginalName;
		
		private string _CorrectedName;
		
		private string _TableName;
		
		private int _ID;
		
		private bool _IsNew;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameCorrectionIDChanging(int value);
    partial void OnNameCorrectionIDChanged();
    partial void OnOriginalNameChanging(string value);
    partial void OnOriginalNameChanged();
    partial void OnCorrectedNameChanging(string value);
    partial void OnCorrectedNameChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsNewChanging(bool value);
    partial void OnIsNewChanged();
    #endregion
		
		public NameCorrection()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCorrectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NameCorrectionID
		{
			get
			{
				return this._NameCorrectionID;
			}
			set
			{
				if ((this._NameCorrectionID != value))
				{
					this.OnNameCorrectionIDChanging(value);
					this.SendPropertyChanging();
					this._NameCorrectionID = value;
					this.SendPropertyChanged("NameCorrectionID");
					this.OnNameCorrectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalName", DbType="VarChar(1200) NOT NULL", CanBeNull=false)]
		public string OriginalName
		{
			get
			{
				return this._OriginalName;
			}
			set
			{
				if ((this._OriginalName != value))
				{
					this.OnOriginalNameChanging(value);
					this.SendPropertyChanging();
					this._OriginalName = value;
					this.SendPropertyChanged("OriginalName");
					this.OnOriginalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedName", DbType="VarChar(1200) NOT NULL", CanBeNull=false)]
		public string CorrectedName
		{
			get
			{
				return this._CorrectedName;
			}
			set
			{
				if ((this._CorrectedName != value))
				{
					this.OnCorrectedNameChanging(value);
					this.SendPropertyChanging();
					this._CorrectedName = value;
					this.SendPropertyChanged("CorrectedName");
					this.OnCorrectedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="BIT NULL")]
		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tecdoc.ModelVisibility")]
	public partial class InvisibleModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModelID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    #endregion
		
		public InvisibleModel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Tecdoc.ModificationVisibility")]
	public partial class InvisibleModification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModificationID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModificationIDChanging(int value);
    partial void OnModificationIDChanged();
    #endregion
		
		public InvisibleModification()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ModificationID
		{
			get
			{
				return this._ModificationID;
			}
			set
			{
				if ((this._ModificationID != value))
				{
					this.OnModificationIDChanging(value);
					this.SendPropertyChanging();
					this._ModificationID = value;
					this.SendPropertyChanged("ModificationID");
					this.OnModificationIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
