<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelingInOrder" xml:space="preserve">
    <value>Canceling in order</value>
  </data>
  <data name="ChangeQuantityRequired" xml:space="preserve">
    <value>To change quantity in the uploaded lines is required</value>
  </data>
  <data name="ConfirmationIsRequired" xml:space="preserve">
    <value>Confirmation is required</value>
  </data>
  <data name="ContinueLoading" xml:space="preserve">
    <value>Continue loading</value>
  </data>
  <data name="DeclineErrorsLines" xml:space="preserve">
    <value>Decline all lines with mistakes and continue loading in the cart</value>
  </data>
  <data name="ErrCartNotEmpty" xml:space="preserve">
    <value>To upload the file your cart should be empty</value>
  </data>
  <data name="ErrEmptyOrder" xml:space="preserve">
    <value>The line {0} shall contain the first order line</value>
  </data>
  <data name="ErrFileNotFoundOrEmpty" xml:space="preserve">
    <value>File \"{0}\" is not found or contains no data</value>
  </data>
  <data name="ErrFileNotSpecified" xml:space="preserve">
    <value>Please select the file to upload</value>
  </data>
  <data name="ErrInvalidFileFormat" xml:space="preserve">
    <value>File format shall be .xls or .xlsx</value>
  </data>
  <data name="ErrInvalidManufacturer" xml:space="preserve">
    <value>The column 3 shall contain the brand</value>
  </data>
  <data name="ErrInvalidOrderNumber" xml:space="preserve">
    <value>The cell C2 shall contain the order number</value>
  </data>
  <data name="ErrInvalidPartNumber" xml:space="preserve">
    <value>The column 4 shall contain the part number</value>
  </data>
  <data name="ErrInvalidPrice" xml:space="preserve">
    <value>The column 7 contains wrong price format</value>
  </data>
  <data name="ErrInvalidQuantity" xml:space="preserve">
    <value>The column 5 shall contain the quantity</value>
  </data>
  <data name="ErrInvalidStrictlyNumberFlag" xml:space="preserve">
    <value>The column 6 shall contain the flag \"to change part number is prohibited\"</value>
  </data>
  <data name="ErrInvalidSupplierID" xml:space="preserve">
    <value>The column 2 shall contain the supplier ID</value>
  </data>
  <data name="ErrItemDoesNotExist" xml:space="preserve">
    <value>The part number is not found</value>
  </data>
  <data name="ErrReaderFailed" xml:space="preserve">
    <value>Failure to get the data of the file \"{0}\"</value>
  </data>
  <data name="ErrSingleSheetRequired" xml:space="preserve">
    <value>Only one list in the file is allowed, please cancel extra sheets</value>
  </data>
  <data name="ErrUnknownFailure" xml:space="preserve">
    <value>Failure to upload the order ({0})</value>
  </data>
  <data name="etc_withRightBracket" xml:space="preserve">
    <value>etc)</value>
  </data>
  <data name="InvalidFtpPrice" xml:space="preserve">
    <value>Price is not conformed to ftp-price list</value>
  </data>
  <data name="ListIsEmpty" xml:space="preserve">
    <value>list is empty</value>
  </data>
  <data name="LoadingError" xml:space="preserve">
    <value>Loading error</value>
  </data>
  <data name="MinOrderQuantity" xml:space="preserve">
    <value>Minimum ordered quantity: {0}</value>
  </data>
  <data name="OrderCanceledPriceExceed" xml:space="preserve">
    <value>Cancelled in the order: the price exceeds the admitted deviation</value>
  </data>
  <data name="PlaceOrder" xml:space="preserve">
    <value>Place order</value>
  </data>
  <data name="PointFileToDownload" xml:space="preserve">
    <value>Point the file to download</value>
  </data>
  <data name="PrcExcessPrice" xml:space="preserve">
    <value>Acceptable value of price deviation (%)</value>
  </data>
  <data name="QuantityExceedsAvailable" xml:space="preserve">
    <value>ordered quantity exceeds the available stock, available: {0}</value>
  </data>
  <data name="Reload" xml:space="preserve">
    <value>Reload</value>
  </data>
  <data name="SendListErrorToEmail" xml:space="preserve">
    <value>Send the list of errors to the email</value>
  </data>
  <data name="SendUploadedOrderToEmail" xml:space="preserve">
    <value>Send the uploaded order to the email</value>
  </data>
  <data name="ShallDivisibleQuantity" xml:space="preserve">
    <value>The quantity shall be divisible by quantity is sets</value>
  </data>
  <data name="UploadCompleteFull" xml:space="preserve">
    <value>Order is successfully uploaded. &lt;br /&gt; {0} lines were added in the cart. &lt;br /&gt;</value>
  </data>
  <data name="UploadedSuccessfully" xml:space="preserve">
    <value>Uploaded successfully</value>
  </data>
  <data name="UploadingFailed" xml:space="preserve">
    <value>File uploading failed!</value>
  </data>
  <data name="UploadToCart" xml:space="preserve">
    <value>Upload to the cart</value>
  </data>
</root>